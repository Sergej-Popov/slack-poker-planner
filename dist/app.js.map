{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@opentelemetry/api\"","webpack:///external \"shortid\"","webpack:///external \"countly-sdk-nodejs\"","webpack:///external \"@slack/web-api\"","webpack:///external \"express\"","webpack:///external \"util\"","webpack:///external \"@opentelemetry/tracing\"","webpack:///external \"body-parser\"","webpack:///external \"lodash/map\"","webpack:///external \"@opentelemetry/exporter-jaeger\"","webpack:///external \"pino\"","webpack:///external \"sqlite3\"","webpack:///external \"sqlite\"","webpack:///external \"redis\"","webpack:///external \"express-handlebars\"","webpack:///external \"async_hooks\"","webpack:///external \"lodash/isString\"","webpack:///external \"lodash/uniqBy\"","webpack:///external \"lodash/chunk\"","webpack:///external \"lodash/groupBy\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"lodash/uniq\"","webpack:///external \"lodash/find\"","webpack:///external \"dotenv\"","webpack:///./src/lib/logger.ts","webpack:///./src/lib/sqlite.ts","webpack:///./src/lib/redis.ts","webpack:///./src/lib/trace-decorator.ts","webpack:///./src/team/team-model.ts","webpack:///./src/lib/to.ts","webpack:///./src/routes/oauth.ts","webpack:///./src/lib/string-match-all.ts","webpack:///./src/session/session-model.ts","webpack:///./src/session/session-controller.ts","webpack:///./src/routes/pp-command.ts","webpack:///./src/routes/interactivity.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","formatters","level","label","number","bindings","getSingleton","asyncLocalStorage","Trace","options","target","propertyName","propertyDesciptor","originalMethod","spanName","args","tracer","getTracer","ctx","getStore","spanOptions","parent","span","startSpan","rv","run","apply","this","then","catch","val","end","err","addEvent","event","message","stack","setStatus","code","UNKNOWN","getSpan","ChannelSettingKey","TeamStore","id","setAttribute","access_token","scope","user_id","setAttributes","db","$id","$name","$access_token","$scope","$user_id","findById","update","teamId","channelId","settingRows","all","$teamId","$channelId","forEach","row","setting_key","setting_value","settings","tasks","keys","map","settingKey","upsertSetting","Promise","$settingKey","$settingValue","to","promise","undefined","req","res","query","error","msg","status","send","slackWebClient","oauthErr","accessResponse","oauth","v2","access","client_id","process","env","SLACK_CLIENT_ID","client_secret","SLACK_CLIENT_SECRET","errorId","ISSUES_LINK","upsertErr","team","upsert","authed_user","COUNTLY_APP_KEY","add_event","count","segmentation","info","render","layout","data","SLACK_APP_ID","TEAM_NAME","matchAll","str","regex","global","exec","push","sessions","SessionStore","USE_REDIS","client","getAsync","rawSession","buildRedisKey","JSON","parse","session","setAsync","set","stringify","Number","REDIS_SESSION_TTL","delAsync","del","sessionId","REDIS_NAMESPACE","DEFAULT_POINTS","SessionControllerErrorCode","SessionController","votesText","participants","sort","userId","join","chat","postMessage","channel","text","title","attachments","buildMessageAttachments","triggerId","points","isProtected","protectedCheckboxesOption","type","emoji","views","open","trigger_id","view","callback_id","private_metadata","submit","close","blocks","block_id","element","placeholder","initial_value","initial_users","hint","optional","initial_options","state","updateMessage","delete","point","Error","SESSION_NOT_ACTIVE","indexOf","ONLY_PARTICIPANTS_CAN_VOTE","votes","length","warn","voteGroups","peopleText","userIds","ts","rawPostMessageResponse","allMentions","split","includes","replace","mention","trim","fallback","color","attachment_type","actions","style","PPCommandRoute","cmd","body","token","SLACK_VERIFICATION_TOKEN","json","response_type","replace_original","help","configure","openNewSessionModal","team_id","teamDomain","team_domain","channel_id","channelName","channel_name","userName","user_name","teamGetErr","INTERNAL","NOT_FOUND","APP_INSTALL_LINK","user","settingsFetchErr","channelSettings","fetchSettings","PARTICIPANTS","POINTS","PROTECTED","custom_points","openModal","stripMentions","InteractivityRoute","payload","interactiveMessage","viewSubmission","callbackId","domain","parts","INVALID_ARGUMENT","action","sessionErr","teamErr","sessionAction","revealSession","cancelSession","vote","createSession","rawPrivateMetadata","privateMetadata","titleInputState","values","TITLE_REQUIRED","participantsInputState","selected_users","NO_PARTICIPANTS","pointsInputState","pointsStr","match","INVALID_POINTS","otherCheckboxesState","other","selectedOptions","selected_options","option","protected","postMessageResponse","upsertSettingErr","upsertSettings","shouldLog","logLevel","errorMessage","modalErrors","slackErrorCode","needed","userErrorMessage","response_action","errors","voteErr","sessionProtected","sessionCreatorId","revealErr","revealAndUpdateMessage","cancelErr","cancelAndUpdateMessage","config","traceProvider","register","REPORT_TRACES","exporter","serviceName","tags","host","JAEGER_HOST","port","parseInt","JAEGER_PORT","logger","debug","addSpanProcessor","jaegerAgent","setupTracing","filename","DB_FILE","driver","migrate","resolve","reject","once","on","server","engine","extname","use","extended","BASE_PATH","router","next","SLACK_SCOPE","COUNTLY_URL","handle","post","url","redirect","initRoutes","listen","PORT","initServer","appKey","init","app_key","main","exit"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","module.exports = require(\"@opentelemetry/api\");","module.exports = require(\"shortid\");","module.exports = require(\"countly-sdk-nodejs\");","module.exports = require(\"@slack/web-api\");","module.exports = require(\"express\");","module.exports = require(\"util\");","module.exports = require(\"@opentelemetry/tracing\");","module.exports = require(\"body-parser\");","module.exports = require(\"lodash/map\");","module.exports = require(\"@opentelemetry/exporter-jaeger\");","module.exports = require(\"pino\");","module.exports = require(\"sqlite3\");","module.exports = require(\"sqlite\");","module.exports = require(\"redis\");","module.exports = require(\"express-handlebars\");","module.exports = require(\"async_hooks\");","module.exports = require(\"lodash/isString\");","module.exports = require(\"lodash/uniqBy\");","module.exports = require(\"lodash/chunk\");","module.exports = require(\"lodash/groupBy\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"lodash/uniq\");","module.exports = require(\"lodash/find\");","module.exports = require(\"dotenv\");","import pino from 'pino';\n\nconst logger = pino({\n  formatters: {\n    level: (label, number) => ({ level: label }),\n    bindings: (bindings) => ({}),\n  },\n});\n\nexport default logger;\n","import * as sqlite3 from 'sqlite3';\nimport { open, Database } from 'sqlite';\nimport logger from './logger';\n\nlet db: Database<sqlite3.Database, sqlite3.Statement>;\n\nexport async function init() {\n  if (db) {\n    logger.warn({ msg: `Trying to init sqlite multiple times!` });\n    return db;\n  }\n\n  logger.info({ msg: `Opening sqlite...` });\n  db = await open({\n    filename: process.env.DB_FILE,\n    driver: sqlite3.Database,\n  });\n\n  logger.info({ msg: `Migrating sqlite...` });\n  await db.migrate();\n\n  return db;\n}\n\nexport function getSingleton() {\n  return db;\n}\n","import * as redis from 'redis';\n\nimport logger from './logger';\n\nlet client: redis.RedisClient;\n\nexport async function init() {\n  if (client) {\n    logger.warn({ msg: `Trying to init redis multiple times!` });\n    return client;\n  }\n\n  logger.info({ msg: `Creating redis client...` });\n  client = redis.createClient();\n\n  await new Promise((resolve, reject) => {\n    client.once('ready', resolve);\n    client.once('error', reject);\n  });\n\n  client.on('error', (err) => {\n    logger.error({\n      msg: `Unexpected redis error`,\n      err,\n    });\n  });\n\n  return client;\n}\n\nexport function getSingleton() {\n  return client;\n}\n","import { AsyncLocalStorage } from 'async_hooks';\nimport * as opentelemetry from '@opentelemetry/api';\n\nconst asyncLocalStorage = new AsyncLocalStorage<{\n  span: opentelemetry.Span;\n}>();\n\nexport function Trace(\n  options: {\n    name?: string;\n  } = {}\n) {\n  return (\n    target: any,\n    propertyName: string,\n    propertyDesciptor: TypedPropertyDescriptor<any>\n  ) => {\n    const originalMethod = propertyDesciptor.value;\n    const spanName = options.name || propertyName;\n\n    // Replace the method\n    propertyDesciptor.value = function (...args: any[]) {\n      const tracer = opentelemetry.trace.getTracer('default');\n      const ctx = asyncLocalStorage.getStore();\n      const spanOptions: opentelemetry.SpanOptions = {};\n\n      if (ctx) {\n        spanOptions.parent = ctx.span;\n      }\n\n      // Start a new span for the method\n      const span = tracer.startSpan(spanName, spanOptions);\n\n      // Execute original method\n      try {\n        const rv: any = asyncLocalStorage.run({ span }, () =>\n          originalMethod.apply(this, args)\n        );\n\n        // Auto finish is on, check return value is promise\n        // Instead of `instanceof` check, prefer checking `.then()` method exists on object.\n        // User may be using custom promise polyfill (https://stackoverflow.com/a/27746324)\n        if (typeof rv == 'object' && rv.then && rv.catch) {\n          return rv\n            .then((val: any) => {\n              // Promise resolved\n              span.end();\n              return val;\n            })\n            .catch((err: any) => {\n              // Promise is rejected\n              // https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n              span.addEvent('error', {\n                event: 'error',\n                message: err.message,\n                stack: err.stack,\n                'error.kind': err.name,\n              });\n              span.setStatus({\n                code: opentelemetry.CanonicalCode.UNKNOWN,\n                message: err.message,\n              });\n              span.end();\n              throw err;\n            });\n        }\n\n        // If return value is not promise, finish and return\n        span.end();\n        return rv;\n      } catch (err) {\n        // Method throwed an error\n        // https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n        span.addEvent('error', {\n          event: 'error',\n          message: err.message,\n          stack: err.stack,\n          'error.kind': err.name,\n        });\n        span.setStatus({\n          code: opentelemetry.CanonicalCode.UNKNOWN,\n          message: err.message,\n        });\n        span.end();\n        throw err;\n      }\n    };\n\n    return propertyDesciptor;\n  };\n}\n\nexport function getSpan() {\n  const ctx = asyncLocalStorage.getStore();\n  return ctx?.span;\n}\n","import * as sqlite from '../lib/sqlite';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport interface ITeam {\n  id: string;\n  name: string;\n  access_token: string;\n  scope: string;\n  user_id: string;\n  custom_points: string;\n}\n\nexport enum ChannelSettingKey {\n  PARTICIPANTS = 'participants',\n  POINTS = 'points',\n  PROTECTED = 'proctected',\n}\n\nexport interface IChannelSetting {\n  team_id: string;\n  channel_id: string;\n  setting_key: string;\n  setting_value: string;\n}\n\nexport class TeamStore {\n  @Trace({ name: 'team.findById' })\n  static async findById(id: string): Promise<ITeam> {\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const db = sqlite.getSingleton();\n    return db.get('SELECT * FROM team WHERE id = ?', id);\n  }\n\n  @Trace({ name: 'team.create' })\n  static async create({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `INSERT INTO\n          team (id, name, access_token, scope, user_id)\n        VALUES\n          ($id, $name, $access_token, $scope, $user_id)`,\n      {\n        $id: id,\n        $name: name,\n        $access_token: access_token,\n        $scope: scope,\n        $user_id: user_id,\n      }\n    );\n  }\n\n  @Trace({ name: 'team.update' })\n  static async update({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `UPDATE\n        team\n      SET\n        name = $name,\n        access_token = $access_token,\n        scope = $scope,\n        user_id = $user_id\n      WHERE\n        id = $id`,\n      {\n        $id: id,\n        $name: name,\n        $access_token: access_token,\n        $scope: scope,\n        $user_id: user_id,\n      }\n    );\n  }\n\n  @Trace({ name: 'team.upsert' })\n  static async upsert({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const team = await TeamStore.findById(id);\n    if (!team) {\n      await TeamStore.create({ id, name, access_token, scope, user_id });\n    } else {\n      await TeamStore.update({ id, name, access_token, scope, user_id });\n    }\n    return TeamStore.findById(id);\n  }\n\n  @Trace()\n  static async fetchSettings(teamId: string, channelId: string) {\n    const span = getSpan();\n    span?.setAttributes({ teamId, channelId });\n    const db = sqlite.getSingleton();\n    const settingRows = await db.all(\n      `SELECT\n        setting_key,\n        setting_value\n      FROM\n        channel_settings\n      WHERE\n        team_id = $teamId AND\n        channel_id = $channelId;`,\n      {\n        $teamId: teamId,\n        $channelId: channelId,\n      }\n    );\n\n    const rv: { [key: string]: string } = {};\n    settingRows.forEach((row: IChannelSetting) => {\n      rv[row.setting_key] = row.setting_value;\n    });\n\n    return rv;\n  }\n\n  @Trace()\n  static async upsertSettings(\n    teamId: string,\n    channelId: string,\n    settings: { [key: string]: string }\n  ) {\n    const tasks = Object.keys(settings).map((settingKey) =>\n      TeamStore.upsertSetting(\n        teamId,\n        channelId,\n        settingKey,\n        settings[settingKey]\n      )\n    );\n    await Promise.all(tasks);\n  }\n\n  @Trace()\n  static async upsertSetting(\n    teamId: string,\n    channelId: string,\n    key: string,\n    value: string\n  ) {\n    const span = getSpan();\n    span?.setAttributes({ teamId, channelId, key, value });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `INSERT INTO\n        channel_settings (team_id, channel_id, setting_key, setting_value)\n      VALUES (\n        $teamId,\n        $channelId,\n        $settingKey,\n        $settingValue\n      )\n      ON CONFLICT(team_id, channel_id, setting_key)\n      DO UPDATE SET setting_value = $settingValue;`,\n      {\n        $teamId: teamId,\n        $channelId: channelId,\n        $settingKey: key,\n        $settingValue: value,\n      }\n    );\n  }\n}\n","/**\n * Inspired by\n * https://medium.com/javascript-in-plain-english/how-to-avoid-try-catch-statements-nesting-chaining-in-javascript-a79028b325c5\n */\n\nexport async function to<T>(promise: Promise<T>): Promise<[Error, T]> {\n  try {\n    return [undefined, await promise];\n  } catch (err) {\n    return [err, undefined];\n  }\n}\n","import * as express from 'express';\nimport { WebClient } from '@slack/web-api';\nimport logger from '../lib/logger';\nimport Countly from 'countly-sdk-nodejs';\nimport { TeamStore } from '../team/team-model';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\n\nexport class OAuthRoute {\n  /**\n   * GET /oauth\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    // Slack-side error, display error message\n    if (req.query.error) {\n      logger.error({\n        msg: `Could not oauth`,\n        err: req.query.error,\n      });\n      return res.status(500).send(req.query.error);\n    }\n\n    // Installed!\n    if (req.query.code) {\n      const slackWebClient = new WebClient();\n      const [oauthErr, accessResponse] = await to(\n        slackWebClient.oauth.v2.access({\n          client_id: process.env.SLACK_CLIENT_ID,\n          client_secret: process.env.SLACK_CLIENT_SECRET,\n          code: req.query.code as string,\n        })\n      );\n\n      if (oauthErr) {\n        const errorId = generateId();\n        logger.error({\n          msg: `Could not oauth, slack api call failed`,\n          errorId,\n          err: oauthErr,\n        });\n        return res\n          .status(500)\n          .send(\n            `Internal server error, please try again (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n          );\n      }\n\n      const [upsertErr, team] = await to(\n        TeamStore.upsert({\n          id: (accessResponse as any).team.id,\n          name: (accessResponse as any).team.name,\n          access_token: (accessResponse as any).access_token,\n          scope: (accessResponse as any).scope,\n          user_id: (accessResponse as any).authed_user.id,\n        })\n      );\n\n      if (upsertErr) {\n        const errorId = generateId();\n        logger.error({\n          msg: `Could not oauth, sqlite upsert failed`,\n          errorId,\n          err: upsertErr,\n        });\n        res\n          .status(500)\n          .send(\n            `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n          );\n      }\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'added_to_team',\n          count: 1,\n          segmentation: {},\n        });\n      }\n\n      logger.info({\n        msg: `Added to team`,\n        team,\n      });\n\n      return res.render('oauth-success', {\n        layout: false,\n        data: {\n          SLACK_APP_ID: process.env.SLACK_APP_ID,\n          TEAM_NAME: team.name,\n        },\n      });\n    }\n\n    // Unknown error\n    const errorId = generateId();\n    logger.error({\n      msg: `Could not oauth, unknown error`,\n      errorId,\n      query: req.query,\n    });\n    return res\n      .status(500)\n      .send(\n        `Unknown error (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n      );\n  }\n}\n","export function matchAll(str: string, regex: RegExp) {\n  const res: string[] = [];\n  let m: RegExpExecArray;\n  if (regex.global) {\n    while ((m = regex.exec(str))) {\n      res.push(m[1]);\n    }\n  } else {\n    if ((m = regex.exec(str))) {\n      res.push(m[1]);\n    }\n  }\n  return res;\n}\n","import { ISlackChatPostMessageResponse } from '../vendor/slack-api-interfaces';\nimport * as redis from '../lib/redis';\nimport { promisify } from 'util';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport interface ISessionMention {\n  type: 'user' | 'special' | 'user-group';\n  id: string;\n}\n\nexport interface ISession {\n  /**\n   * Random generated session id.\n   */\n  id: string;\n  /**\n   * Title of the session. Mentions are excluded.\n   */\n  title: string;\n  /**\n   * Slack Channel ID.\n   */\n  channelId: string;\n  /**\n   * Slack User ID who starts this session.\n   */\n  userId: string;\n  /**\n   * Poker point values.\n   */\n  points: string[];\n  /**\n   * List of User IDs resolved from used mentions.\n   */\n  participants: string[];\n  /**\n   * Votes like { U2147483697: '3', U2147483698: '2' }\n   */\n  votes: { [key: string]: string };\n  /**\n   * Session state.\n   */\n  state: 'active' | 'revealed' | 'cancelled';\n  /**\n   * The result of `chat.postMessage` that sent by our bot to\n   * the channel/conversation to /pp command used in.\n   */\n  rawPostMessageResponse: ISlackChatPostMessageResponse;\n  /**\n   * Whether this session is protected, which means only the owner\n   * can cancel and reveal session.\n   */\n  protected: boolean;\n}\n\n// If `process.env.USE_REDIS` is falsy, in-memory db will be used\nconst sessions: { [key: string]: ISession } = {};\n\nexport class SessionStore {\n  @Trace({ name: 'session.findById' })\n  static async findById(id: string): Promise<ISession> {\n    if (!process.env.USE_REDIS) {\n      return sessions[id];\n    }\n\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const client = redis.getSingleton();\n    const getAsync = promisify(client.get.bind(client));\n    const rawSession = await getAsync(buildRedisKey(id));\n    if (!rawSession) return;\n    return JSON.parse(rawSession);\n  }\n\n  @Trace({ name: 'session.upsert' })\n  static async upsert(session: ISession) {\n    if (!process.env.USE_REDIS) {\n      sessions[session.id] = session;\n      return;\n    }\n\n    const span = getSpan();\n    span?.setAttribute('id', session.id);\n    const client = redis.getSingleton();\n    const setAsync = promisify(client.set.bind(client));\n    await setAsync(\n      buildRedisKey(session.id),\n      JSON.stringify(session),\n      'EX',\n      Number(process.env.REDIS_SESSION_TTL)\n    );\n  }\n\n  @Trace({ name: 'session.delete' })\n  static async delete(id: string) {\n    if (!process.env.USE_REDIS) {\n      delete sessions[id];\n      return;\n    }\n\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const client = redis.getSingleton();\n    const delAsync = promisify(client.del.bind(client));\n    await delAsync(buildRedisKey(id));\n  }\n}\n\nfunction buildRedisKey(sessionId: string) {\n  return `${process.env.REDIS_NAMESPACE}:session:${sessionId}`;\n}\n","import { matchAll } from '../lib/string-match-all';\nimport { ISession, ISessionMention, SessionStore } from './session-model';\nimport uniqBy from 'lodash/uniqBy';\nimport chunk from 'lodash/chunk';\nimport map from 'lodash/map';\nimport groupBy from 'lodash/groupBy';\nimport { ITeam } from '../team/team-model';\nimport { WebClient } from '@slack/web-api';\nimport logger from '../lib/logger';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport const DEFAULT_POINTS = [\n  '0',\n  '1/2',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13',\n  '20',\n  '40',\n  '100',\n  '∞',\n  '?',\n];\n\nexport enum SessionControllerErrorCode {\n  NO_PARTICIPANTS = 'no_participants',\n  TITLE_REQUIRED = 'title_required',\n  INVALID_POINTS = 'invalid_points',\n  SESSION_NOT_ACTIVE = 'session_not_active',\n  ONLY_PARTICIPANTS_CAN_VOTE = 'only_participants_can_vote',\n}\n\nexport class SessionController {\n  /**\n   * Sends a message for the provided session.\n   * CAUTION: Participants must resolved before using this method.\n   */\n  @Trace()\n  static async postMessage(session: ISession, team: ITeam) {\n    const slackWebClient = new WebClient(team.access_token);\n    const votesText = map(\n      session.participants.sort(),\n      (userId) => `<@${userId}>: awaiting`\n    ).join('\\n');\n\n    return slackWebClient.chat.postMessage({\n      channel: session.channelId,\n      text: `Title: *${session.title}*\\n\\nVotes:\\n${votesText}`,\n      attachments: buildMessageAttachments(session) as any,\n    });\n  }\n\n  /**\n   * Opens a `new session` modal\n   */\n  @Trace()\n  static async openModal({\n    triggerId,\n    team,\n    channelId,\n    title,\n    participants,\n    points,\n    isProtected,\n  }: {\n    triggerId: string;\n    team: ITeam;\n    channelId: string;\n    title: string;\n    participants: string[];\n    points: string[];\n    isProtected: boolean;\n  }) {\n    const slackWebClient = new WebClient(team.access_token);\n\n    const protectedCheckboxesOption = {\n      text: {\n        type: 'plain_text',\n        text: 'Protected (prevent others to cancel or reveal this session)',\n        emoji: true,\n      },\n      value: 'protected',\n    } as any;\n\n    await slackWebClient.views.open({\n      trigger_id: triggerId,\n      view: {\n        callback_id: `newSessionModal:submit`,\n        private_metadata: JSON.stringify({ channelId }),\n        type: 'modal',\n        title: {\n          type: 'plain_text',\n          text: 'Poker Planner',\n          emoji: true,\n        },\n        submit: {\n          type: 'plain_text',\n          text: 'Start New Session',\n          emoji: true,\n        },\n        close: {\n          type: 'plain_text',\n          text: 'Cancel',\n          emoji: true,\n        },\n        blocks: [\n          {\n            type: 'input',\n            block_id: 'title',\n            element: {\n              type: 'plain_text_input',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Write a topic for this voting session',\n                emoji: true,\n              },\n              initial_value: title || '',\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Title',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'participants',\n            element: {\n              type: 'multi_users_select',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Add users',\n                emoji: true,\n              },\n              initial_users: participants,\n              // max_selected_items: 25,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Participants',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'points',\n            element: {\n              type: 'plain_text_input',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Change poker points',\n                emoji: true,\n              },\n              initial_value: points.join(' ') || DEFAULT_POINTS.join(' '),\n            },\n            hint: {\n              type: 'plain_text',\n              text: 'Enter points seperated by space',\n              emoji: true,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Points',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'other',\n            optional: true,\n            element: {\n              type: 'checkboxes',\n              options: [protectedCheckboxesOption],\n              initial_options: isProtected\n                ? [protectedCheckboxesOption]\n                : undefined,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Other',\n              emoji: true,\n            },\n          },\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text:\n                '> :bulb: These options will be *remembered* the next time you create a session *on this channel*.',\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  /**\n   * Updates the session message as revealing all the votes.\n   * And clean-up the session from store.\n   */\n  @Trace()\n  static async revealAndUpdateMessage(\n    session: ISession,\n    team: ITeam,\n    userId: string\n  ) {\n    session.state = 'revealed';\n    await SessionController.updateMessage(session, team, userId);\n    await SessionStore.delete(session.id);\n  }\n\n  /**\n   * Updates the session message as cancelled.\n   * And clean-up the session from store.\n   */\n  @Trace()\n  static async cancelAndUpdateMessage(\n    session: ISession,\n    team: ITeam,\n    userId: string\n  ) {\n    session.state = 'cancelled';\n    await SessionController.updateMessage(session, team, userId);\n    await SessionStore.delete(session.id);\n  }\n\n  /**\n   *\n   */\n  @Trace()\n  static async vote(\n    session: ISession,\n    team: ITeam,\n    userId: string,\n    point: string\n  ) {\n    if (session.state != 'active') {\n      throw new Error(SessionControllerErrorCode.SESSION_NOT_ACTIVE);\n    }\n\n    if (session.participants.indexOf(userId) == -1) {\n      throw new Error(SessionControllerErrorCode.ONLY_PARTICIPANTS_CAN_VOTE);\n    }\n\n    session.votes[userId] = point;\n    session.state =\n      Object.keys(session.votes).length == session.participants.length\n        ? 'revealed'\n        : 'active';\n\n    if (session.state == 'revealed') {\n      await SessionController.updateMessage(session, team); // do not send userId\n      await SessionStore.delete(session.id);\n      logger.info({\n        msg: `Auto revealing votes`,\n        sessionId: session.id,\n        team: {\n          id: team.id,\n          name: team.name,\n        },\n      });\n      return;\n    }\n\n    // Voting is still active\n    await SessionStore.upsert(session);\n\n    try {\n      await SessionController.updateMessage(session, team);\n    } catch (err) {\n      logger.warn({\n        msg: `Could not refreshed session message after a vote`,\n        err,\n        session,\n        userId,\n        point,\n      });\n    }\n  }\n\n  /**\n   * Updates session message according to session state.\n   */\n  @Trace()\n  static async updateMessage(session: ISession, team: ITeam, userId?: string) {\n    const slackWebClient = new WebClient(team.access_token);\n\n    if (session.state == 'revealed') {\n      const voteGroups = groupBy(\n        session.participants,\n        (userId) => session.votes[userId] || 'not-voted'\n      );\n      const votesText = Object.keys(voteGroups)\n        .sort()\n        .map((point) => {\n          const votes = voteGroups[point];\n          const peopleText =\n            votes.length == 1 ? `1 person` : `${votes.length} people`;\n          const userIds = votes\n            .sort()\n            .map((userId) => `<@${userId}>`)\n            .join(', ');\n\n          if (point == 'not-voted') {\n            return `${peopleText} *did not vote* (${userIds})`;\n          }\n\n          return `${peopleText} voted *${point}* (${userIds})`;\n        })\n        .join('\\n');\n\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: userId\n          ? `Title: *${session.title}* (revealed by <@${userId}>)\\n\\nResult:\\n${votesText}`\n          : `Title: *${session.title}*\\n\\nResult:\\n${votesText}`,\n        attachments: [],\n      });\n    } else if (session.state == 'cancelled') {\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: userId\n          ? `Title: *${session.title}* (cancelled by <@${userId}>)`\n          : `Title: *${session.title}* (cancelled)`,\n        attachments: [],\n      });\n    } else {\n      const votesText = map(session.participants.sort(), (userId) => {\n        if (session.votes.hasOwnProperty(userId)) {\n          return `<@${userId}>: :white_check_mark:`;\n        }\n\n        return `<@${userId}>: awaiting`;\n      }).join('\\n');\n\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: `Title: *${session.title}*\\n\\nVotes:\\n${votesText}`,\n        attachments: buildMessageAttachments(session) as any,\n      });\n    }\n  }\n\n  /**\n   * For a given slack slash-command text, extract mentions\n   */\n  static exractMentions(text: string) {\n    const allMentions: ISessionMention[] = [];\n\n    // User mentions\n    matchAll(text, /<@(.*?)>/g).forEach((str) => {\n      allMentions.push({ type: 'user', id: str.split('|')[0] });\n    });\n\n    // Group mentions\n    matchAll(text, /<!(.*?)>/g).forEach((str) => {\n      const specialMentions = ['everyone', 'channel', 'here'];\n      if (specialMentions.indexOf(str) > -1) {\n        allMentions.push({ type: 'special', id: str });\n      } else if (str.includes('subteam')) {\n        // Custom user group mentions\n        const [id, name] = str.replace('subteam^', '').split('|');\n\n        allMentions.push({\n          type: 'user-group',\n          id,\n        });\n      }\n    });\n\n    // Remove duplicate mentions\n    return uniqBy(allMentions, (mention) => `${mention.type}-${mention.id}`);\n  }\n\n  /**\n   * For a given slack slash-command text, extract mentions\n   */\n  static stripMentions(text: string) {\n    return text\n      .replace(/<@(.*?)>/g, '')\n      .replace(/<!(.*?)>/g, '')\n      .replace(/\\s\\s+/g, ' ')\n      .trim();\n  }\n}\n\nexport function buildMessageAttachments(session: ISession) {\n  const pointAttachments = chunk(session.points, 5).map((points) => {\n    return {\n      text: '',\n      fallback: 'You are unable to vote',\n      callback_id: `vote:${session.id}`,\n      color: '#3AA3E3',\n      attachment_type: 'default',\n      actions: points.map((point) => ({\n        name: 'point',\n        text: point,\n        type: 'button',\n        value: point,\n      })),\n    };\n  });\n\n  return [\n    ...pointAttachments,\n    {\n      text: 'Actions',\n      fallback: 'You are unable to send action',\n      callback_id: `action:${session.id}`,\n      color: '#3AA3E3',\n      attachment_type: 'default',\n      actions: [\n        {\n          name: 'action',\n          text: 'Reveal',\n          type: 'button',\n          value: 'reveal',\n          style: 'danger',\n        },\n        {\n          name: 'action',\n          text: 'Cancel',\n          type: 'button',\n          value: 'cancel',\n          style: 'danger',\n        },\n      ],\n    },\n  ];\n}\n","import * as express from 'express';\nimport logger from '../lib/logger';\nimport Countly from 'countly-sdk-nodejs';\nimport { TeamStore, ChannelSettingKey } from '../team/team-model';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\nimport isString from 'lodash/isString';\nimport { ISlackCommandRequestBody } from '../vendor/slack-api-interfaces';\nimport {\n  SessionController,\n  DEFAULT_POINTS,\n} from '../session/session-controller';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport class PPCommandRoute {\n  /**\n   * POST /slack/pp-command\n   * POST /slack/pp-slash-command\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    const cmd = req.body as ISlackCommandRequestBody;\n\n    if (cmd.token != process.env.SLACK_VERIFICATION_TOKEN) {\n      logger.error({\n        msg: `Could not created session, slack verification token is invalid`,\n        cmd,\n      });\n      return res.json({\n        text: `Invalid slack verification token, please get in touch with the maintainer`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!isString(cmd.text)) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not created session, command.text not string`,\n        errorId,\n        cmd,\n      });\n      return res.json({\n        text:\n          `Unexpected command usage (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const firstWord = cmd.text.trim().split(' ')[0];\n    switch (firstWord) {\n      case 'help': {\n        return PPCommandRoute.help(res);\n      }\n\n      case 'config': {\n        return await PPCommandRoute.configure(cmd, res);\n      }\n\n      default: {\n        return await PPCommandRoute.openNewSessionModal(cmd, res);\n      }\n    }\n  }\n\n  /**\n   * `/pp some task name`\n   */\n  @Trace()\n  static async openNewSessionModal(\n    cmd: ISlackCommandRequestBody,\n    res: express.Response\n  ) {\n    const span = getSpan();\n    span?.setAttributes({\n      teamId: cmd.team_id,\n      teamDomain: cmd.team_domain,\n      channelId: cmd.channel_id,\n      channelName: cmd.channel_name,\n      userId: cmd.user_id,\n      userName: cmd.user_name,\n      text: cmd.text,\n    });\n\n    if (cmd.channel_name == 'directmessage') {\n      return res.json({\n        text: `Poker planning cannot be started in direct messages`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const [teamGetErr, team] = await to(TeamStore.findById(cmd.team_id));\n    if (teamGetErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not created session, could not get the team from db`,\n        errorId,\n        err: teamGetErr,\n        cmd,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamGetErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      logger.info({\n        msg: `Could not created session, team could not be found`,\n        cmd,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${cmd.team_domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    // If permissions are old, show migration message\n    if (\n      team.scope ==\n      'identify,commands,channels:read,groups:read,users:read,chat:write:bot'\n    ) {\n      logger.info({\n        msg: `Migration message`,\n        team: {\n          id: team.id,\n          name: team.name,\n        },\n        user: {\n          id: cmd.user_id,\n          name: cmd.user_name,\n        },\n      });\n      span?.addEvent('show_migration_message');\n      return res.json({\n        text:\n          'Poker Planner has migrated to ' +\n          \"<https://slackhq.com/introducing-a-dramatically-upgraded-slack-app-toolkit|Slack's new app toolkit> \" +\n          'which adds granular permissions for better security. We now depend on bot permissions instead of ' +\n          'user permissions. So that you can explicitly manage which channels/conversations Poker Planner can ' +\n          'access. However, this requires a couple of changes:\\n\\n• In order to obtain new bot permissions ' +\n          'and drop user ones, *you need to reinstall Poker Planner* to your workspace on ' +\n          `<${process.env.APP_INSTALL_LINK}>\\n• Before using \\`/pp\\` command, *Poker Planner app must be ` +\n          'added to that channel/conversation*. You can simply add or invite it by just mentioning the app like ' +\n          '`@poker_planner`. You can also do that from channel/converstion details menu.',\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    /**\n     * From: https://api.slack.com/legacy/interactive-messages\n     *\n     * Responding right away\n     * ---\n     * You must respond within 3 seconds. If it takes your application longer\n     * to process the request, we recommend responding with a HTTP 200 OK\n     * immediately, then use the response_url to respond five times within\n     * thirty minutes.\n     *\n     * Responding incrementally with response_url\n     * ---\n     * Use the response URL provided in the post to:\n     * - Replace the current message\n     * - Respond with a public message in the channel\n     * - Respond with an ephemeral message in the channel that only the\n     * acting user will see\n     *\n     * You'll be able to use a response_url five times within 30 minutes.\n     * After that, it's best to move on to new messages and new interactions.\n     */\n\n    try {\n      // Prepare settings (participants, points...)\n      const [settingsFetchErr, channelSettings] = await to(\n        TeamStore.fetchSettings(team.id, cmd.channel_id)\n      );\n      if (settingsFetchErr) {\n        span?.addEvent('settings_fetch_error', {\n          error: settingsFetchErr.message,\n        });\n      }\n      const settings = {\n        [ChannelSettingKey.PARTICIPANTS]: [] as string[],\n        [ChannelSettingKey.POINTS]: DEFAULT_POINTS,\n        [ChannelSettingKey.PROTECTED]: false,\n      };\n      if (channelSettings?.[ChannelSettingKey.PARTICIPANTS]) {\n        settings[ChannelSettingKey.PARTICIPANTS] = channelSettings[\n          ChannelSettingKey.PARTICIPANTS\n        ].split(' ');\n      }\n      if (team.custom_points) {\n        settings[ChannelSettingKey.POINTS] = team.custom_points.split(' ');\n      }\n      if (channelSettings?.[ChannelSettingKey.POINTS]) {\n        settings[ChannelSettingKey.POINTS] = channelSettings[\n          ChannelSettingKey.POINTS\n        ].split(' ');\n      }\n      if (channelSettings?.[ChannelSettingKey.PROTECTED]) {\n        settings[ChannelSettingKey.PROTECTED] = JSON.parse(\n          channelSettings[ChannelSettingKey.PROTECTED]\n        );\n      }\n\n      await SessionController.openModal({\n        triggerId: cmd.trigger_id,\n        team,\n        channelId: cmd.channel_id,\n        title: SessionController.stripMentions(cmd.text).trim(),\n        participants: settings[ChannelSettingKey.PARTICIPANTS],\n        points: settings[ChannelSettingKey.POINTS],\n        isProtected: settings[ChannelSettingKey.PROTECTED],\n      });\n\n      // Send acknowledgement back to API -- HTTP 200\n      res.send();\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'new_session_modal_opened',\n          count: 1,\n          segmentation: {},\n        });\n      }\n    } catch (err) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not open modal`,\n        errorId,\n        err,\n        cmd,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: err.message,\n      });\n      return res.json({\n        text:\n          `Could not open modal (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n  }\n\n  /**\n   * `/pp config ...`\n   */\n  static async configure(cmd: ISlackCommandRequestBody, res: express.Response) {\n    return res.json({\n      text:\n        'This command is depracated. The session settings (points, participants, ...) ' +\n        'are now persisted automatically for each channel/conversation.',\n      response_type: 'ephemeral',\n      replace_original: false,\n    });\n  }\n\n  /**\n   * `/pp help`\n   */\n  static help(res: express.Response) {\n    return res.json({\n      text: ``,\n      response_type: 'ephemeral',\n      replace_original: false,\n      attachments: [\n        {\n          color: '#3AA3E3',\n          text:\n            '`/pp`\\n' + 'Opens a dialog to start a new poker planning session.',\n        },\n        {\n          color: '#3AA3E3',\n          text:\n            '`/pp some topic text`\\n' +\n            'Opens the same dialog, however title input is automatically ' +\n            'filled with the value you provided.',\n        },\n      ],\n    });\n  }\n}\n","import * as express from 'express';\nimport logger from '../lib/logger';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\nimport { TeamStore, ITeam, ChannelSettingKey } from '../team/team-model';\nimport { SessionStore, ISession } from '../session/session-model';\nimport {\n  SessionController,\n  SessionControllerErrorCode,\n  DEFAULT_POINTS,\n} from '../session/session-controller';\nimport Countly from 'countly-sdk-nodejs';\nimport isEmpty from 'lodash/isEmpty';\nimport {\n  IInteractiveMessageActionPayload,\n  IViewSubmissionActionPayload,\n} from '../vendor/slack-api-interfaces';\nimport uniq from 'lodash/uniq';\nimport find from 'lodash/find';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport class InteractivityRoute {\n  /**\n   * POST /slack/action-endpoint\n   * POST /slack/interactivity\n   * https://api.slack.com/interactivity/handling#payloads\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    let payload:\n      | IInteractiveMessageActionPayload\n      | IViewSubmissionActionPayload;\n\n    try {\n      payload = JSON.parse(req.body.payload);\n    } catch (err) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not parse action payload`,\n        errorId,\n        body: req.body,\n      });\n      return res.json({\n        text:\n          `Unexpected slack action payload (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (payload.token != process.env.SLACK_VERIFICATION_TOKEN) {\n      logger.error({\n        msg: `Could not process action, invalid verification token`,\n        payload,\n      });\n      return res.json({\n        text: `Invalid slack verification token, please get in touch with the maintainer`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    switch (payload.type) {\n      case 'interactive_message': {\n        await InteractivityRoute.interactiveMessage({ payload, res });\n        return;\n      }\n\n      case 'view_submission': {\n        await InteractivityRoute.viewSubmission({ payload, res });\n        return;\n      }\n\n      default: {\n        const errorId = generateId();\n        logger.error({\n          msg: `Unexpected interactive-message action callbackId`,\n          errorId,\n          payload,\n        });\n        return res.json({\n          text:\n            `Unexpected payload type (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user clicks on a button on message\n   */\n  @Trace()\n  static async interactiveMessage({\n    payload, // action request payload\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      callbackId: payload.callback_id,\n      teamId: payload.team.id,\n      teamDomain: payload.team.domain,\n      userId: payload.user.id,\n      userName: payload.user.name,\n      channelId: payload.channel.id,\n      channelName: payload.channel.name,\n    });\n    const parts = payload.callback_id.split(':');\n\n    if (parts.length != 2) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Unexpected interactive message callback id`,\n        errorId,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n        message: `Unexpected callback_id`,\n      });\n      return res.json({\n        text:\n          `Unexpected interactive message callback id (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const [action, sessionId] = parts;\n    span?.setAttributes({ action, sessionId });\n\n    // Get session\n    const [sessionErr, session] = await to(SessionStore.findById(sessionId));\n\n    if (sessionErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not get session`,\n        errorId,\n        err: sessionErr,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: sessionErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!session) {\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Session not found',\n      });\n      return res.json({\n        text: `Ooops, could not find the session, it may be expired or cancelled`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    // Get team\n    const [teamErr, team] = await to(TeamStore.findById(payload.team.id));\n\n    if (teamErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not get team`,\n        errorId,\n        err: teamErr,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${payload.team.domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    switch (action) {\n      /**\n       * A user clicked session actions button:\n       * - Reveal\n       * - Cancel\n       */\n      case 'action': {\n        const sessionAction = payload.actions[0].value;\n        span?.setAttributes({ sessionAction });\n\n        if (sessionAction == 'reveal') {\n          await InteractivityRoute.revealSession({\n            payload,\n            team,\n            session,\n            res,\n          });\n        } else if (sessionAction == 'cancel') {\n          await InteractivityRoute.cancelSession({\n            payload,\n            team,\n            session,\n            res,\n          });\n        } else {\n          const errorId = generateId();\n          logger.error({\n            msg: `Unexpected action button clicked`,\n            errorId,\n            sessionAction,\n            payload,\n          });\n          span?.setAttribute('error.id', errorId);\n          span?.setStatus({\n            code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n            message: `Unexpected session action`,\n          });\n          res.json({\n            text:\n              `Unexpected action button (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        return;\n      }\n\n      /**\n       * A user clicked vote point button\n       */\n      case 'vote': {\n        await InteractivityRoute.vote({ payload, team, session, res });\n        return;\n      }\n\n      /**\n       * Unexpected action\n       */\n      default: {\n        const errorId = generateId();\n        logger.error({\n          msg: `Unexpected action`,\n          errorId,\n          action,\n          payload,\n        });\n        span?.setAttribute('error.id', errorId);\n        span?.setStatus({\n          code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n          message: `Unexpected action`,\n        });\n        return res.json({\n          text:\n            `Unexpected action (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user clicks a submit button a view\n   */\n  @Trace()\n  static async viewSubmission({\n    payload, // action request payload\n    res,\n  }: {\n    payload: IViewSubmissionActionPayload;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      teamId: payload.team.id,\n      teamDomain: payload.team.domain,\n      userId: payload.user.id,\n      userName: payload.user.name,\n    });\n\n    const [teamGetErr, team] = await to(TeamStore.findById(payload.team.id));\n    if (teamGetErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not create session, could not get the team from db`,\n        errorId,\n        err: teamGetErr,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamGetErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      logger.info({\n        msg: `Could not create session, team could not be found`,\n        payload,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${payload.team.domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const callbackId = payload.view.callback_id;\n    span?.setAttributes({ callbackId });\n\n    switch (callbackId) {\n      case 'newSessionModal:submit': {\n        return InteractivityRoute.createSession({ payload, team, res });\n      }\n\n      default: {\n        const errorId = generateId();\n        logger.error({\n          msg: `Unexpected view-submission action callbackId`,\n          errorId,\n          callbackId,\n          payload,\n        });\n        span?.setAttribute('error.id', errorId);\n        span?.setStatus({\n          code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n          message: `Unexpected callback_id`,\n        });\n        return res.json({\n          text:\n            `Unexpected view-submission callback id (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user submits the `new session` modal.\n   */\n  @Trace()\n  static async createSession({\n    payload, // action request payload\n    team,\n    res,\n  }: {\n    payload: IViewSubmissionActionPayload;\n    team: ITeam;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n\n    try {\n      span?.setAttributes({\n        rawPrivateMetadata: payload.view.private_metadata,\n      });\n      const privateMetadata = JSON.parse(payload.view.private_metadata);\n      const titleInputState = payload.view.state.values.title as any;\n      const title = titleInputState[Object.keys(titleInputState)[0]].value;\n      span?.setAttributes({ title });\n\n      if (!title || title.trim().length == 0) {\n        throw new Error(SessionControllerErrorCode.TITLE_REQUIRED);\n      }\n\n      const participantsInputState = payload.view.state.values\n        .participants as any;\n      const participants =\n        participantsInputState[Object.keys(participantsInputState)[0]]\n          .selected_users;\n      span?.setAttributes({ participants: participants.join(' ') });\n\n      if (participants.length == 0) {\n        throw new Error(SessionControllerErrorCode.NO_PARTICIPANTS);\n      }\n\n      const pointsInputState = payload.view.state.values.points as any;\n      const pointsStr =\n        pointsInputState[Object.keys(pointsInputState)[0]].value || '';\n      let points: string[] = uniq(pointsStr.match(/\\S+/g)) || [];\n      span?.setAttributes({ points: pointsStr });\n\n      if (points.length == 1 && points[0] == 'reset') {\n        points = DEFAULT_POINTS;\n      }\n\n      if (points.length < 2 || points.length > 25) {\n        throw new Error(SessionControllerErrorCode.INVALID_POINTS);\n      }\n\n      const otherCheckboxesState = payload.view.state.values.other as any;\n      const selectedOptions = otherCheckboxesState\n        ? otherCheckboxesState[Object.keys(otherCheckboxesState)[0]]\n            .selected_options\n        : [];\n      const isProtected = !!find(\n        selectedOptions,\n        (option) => option.value == 'protected'\n      );\n      span?.setAttributes({ isProtected: `${isProtected}` });\n\n      // Create session struct\n      const session: ISession = {\n        id: generateId(),\n        title,\n        points,\n        votes: {},\n        state: 'active',\n        channelId: privateMetadata.channelId,\n        userId: payload.user.id,\n        participants,\n        rawPostMessageResponse: undefined,\n        protected: isProtected,\n      };\n      span?.setAttributes({\n        sessionId: session.id,\n        channelId: privateMetadata.channelId,\n        userId: payload.user.id,\n        userName: payload.user.name,\n      });\n\n      logger.info({\n        msg: `Creating a new session`,\n        team: {\n          id: team.id,\n          name: team.name,\n        },\n        user: {\n          id: payload.user.id,\n          name: payload.user.name,\n        },\n        channelId: privateMetadata.channelId,\n        sessionId: session.id,\n      });\n\n      const postMessageResponse = await SessionController.postMessage(\n        session,\n        team\n      );\n      session.rawPostMessageResponse = postMessageResponse as any;\n\n      await SessionStore.upsert(session);\n\n      res.send();\n\n      const [upsertSettingErr] = await to(\n        TeamStore.upsertSettings(team.id, session.channelId, {\n          [ChannelSettingKey.PARTICIPANTS]: session.participants.join(' '),\n          [ChannelSettingKey.POINTS]: session.points.join(' '),\n          [ChannelSettingKey.PROTECTED]: JSON.stringify(session.protected),\n        })\n      );\n      if (upsertSettingErr) {\n        span?.addEvent('upsert_settings_error', {\n          message: upsertSettingErr.message,\n        });\n        logger.error({\n          msg: `Could not upsert settings after creating new session`,\n          session,\n          err: upsertSettingErr,\n        });\n      }\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'topic_created',\n          count: 1,\n          segmentation: {\n            participants: session.participants.length,\n          },\n        });\n      }\n    } catch (err) {\n      const errorId = generateId();\n      let shouldLog = true;\n      let logLevel: 'info' | 'warn' | 'error' = 'error';\n      let errorMessage =\n        `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n        `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`;\n      let modalErrors: { [key: string]: string } = {};\n\n      const slackErrorCode = err.data && err.data.error;\n      if (slackErrorCode) {\n        span?.setAttributes({ slackErrorCode });\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\" (error code: ${errorId})\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}>`;\n      }\n\n      /**\n       * Slack API platform errors\n       */\n      if (slackErrorCode == 'not_in_channel') {\n        shouldLog = false;\n        errorMessage =\n          `Poker Planner app is not added to this channel. ` +\n          `Please try again after adding it. ` +\n          `You can simply add the app just by mentioning it, like \"*@poker_planner*\".`;\n      } else if (slackErrorCode == 'channel_not_found') {\n        shouldLog = false;\n        errorMessage =\n          `Oops, we couldn't find this channel. ` +\n          `Are you sure that Poker Planner app is added to this channel/conversation? ` +\n          `You can simply add the app by mentioning it, like \"*@poker_planner*\". ` +\n          `However this may not work in Group DMs, you need to explicitly add it as a ` +\n          `member from conversation details menu. Please try again after adding it.`;\n      } else if (slackErrorCode == 'token_revoked') {\n        logLevel = 'info';\n        errorMessage =\n          `Poker Planner's access has been revoked for this workspace. ` +\n          `In order to use it, you need to install the app again on ` +\n          `<${process.env.APP_INSTALL_LINK}>`;\n      } else if (slackErrorCode == 'method_not_supported_for_channel_type') {\n        logLevel = 'info';\n        errorMessage = `Poker Planner cannot be used in this type of conversations.`;\n      } else if (slackErrorCode == 'missing_scope') {\n        if (err.data.needed == 'mpim:read') {\n          logLevel = 'info';\n          errorMessage =\n            `Poker Planner now supports Group DMs! However it requires ` +\n            `additional permissions that we didn't obtained previously. You need to visit ` +\n            `<${process.env.APP_INSTALL_LINK}> and reinstall the app to enable this feature.`;\n        } else if (err.data.needed == 'usergroups:read') {\n          logLevel = 'info';\n          errorMessage =\n            `Poker Planner now supports @usergroup mentions! However it requires ` +\n            `additional permissions that we didn't obtained previously. You need to visit ` +\n            `<${process.env.APP_INSTALL_LINK}> and reinstall the app to enable this feature.`;\n        }\n      } else if (\n        /**\n         * Internal errors\n         */\n        err.message == SessionControllerErrorCode.NO_PARTICIPANTS\n      ) {\n        shouldLog = false;\n        errorMessage = `You must add at least 1 person.`;\n        modalErrors = {\n          participants: errorMessage,\n        };\n      } else if (err.message == SessionControllerErrorCode.TITLE_REQUIRED) {\n        shouldLog = false;\n        errorMessage = `Title is required`;\n        modalErrors = {\n          title: errorMessage,\n        };\n      } else if (err.message == SessionControllerErrorCode.INVALID_POINTS) {\n        shouldLog = false;\n        errorMessage = `You must provide at least 2 poker points, the maximum is 25.`;\n        modalErrors = {\n          points: errorMessage,\n        };\n      }\n\n      if (shouldLog) {\n        logger[logLevel]({\n          msg: `Could not create session`,\n          errorId,\n          err,\n          payload,\n        });\n      }\n\n      span?.setAttributes({\n        'error.id': errorId,\n        userErrorMessage: errorMessage,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.UNKNOWN,\n        message: err.message,\n      });\n\n      // Show the generic errors on a new modal\n      if (isEmpty(modalErrors)) {\n        return res.json({\n          response_action: 'push',\n          view: {\n            type: 'modal',\n            title: {\n              type: 'plain_text',\n              text: 'Poker Planner',\n              emoji: true,\n            },\n            close: {\n              type: 'plain_text',\n              text: 'Close',\n              emoji: true,\n            },\n            blocks: [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `:x: ${errorMessage}`,\n                },\n              },\n            ],\n          },\n        });\n      }\n\n      // Show error on form elements\n      return res.json({\n        response_action: 'errors',\n        errors: modalErrors,\n      });\n    }\n  }\n\n  /**\n   * A user clicks on a vote button.\n   */\n  @Trace()\n  static async vote({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    const point = payload.actions[0].value;\n    span?.setAttributes({ point });\n    logger.info({\n      msg: `Voting`,\n      point,\n      sessionId: session.id,\n      team: {\n        id: team.id,\n        name: team.name,\n      },\n      user: {\n        id: payload.user.id,\n        name: payload.user.name,\n      },\n    });\n    const [voteErr] = await to(\n      SessionController.vote(session, team, payload.user.id, point)\n    );\n\n    if (voteErr) {\n      switch (voteErr.message) {\n        case SessionControllerErrorCode.SESSION_NOT_ACTIVE: {\n          return res.json({\n            text: `You cannot vote revealed or cancelled session`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        case SessionControllerErrorCode.ONLY_PARTICIPANTS_CAN_VOTE: {\n          return res.json({\n            text: `You are not a participant of that session`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        // Unknown error\n        default: {\n          const errorId = generateId();\n          logger.error({\n            msg: `Could not vote`,\n            errorId,\n            err: voteErr,\n            payload,\n          });\n          span?.setAttributes({ 'error.id': errorId });\n          span?.setStatus({\n            code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n            message: `Unexpected vote error`,\n          });\n          return res.json({\n            text:\n              `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n      }\n    }\n\n    // Successfully voted\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_voted',\n        count: 1,\n        segmentation: {\n          points: payload.actions[0].value,\n        },\n      });\n    }\n\n    return res.send();\n  }\n\n  /**\n   * A user clicks reveal button.\n   */\n  @Trace()\n  static async revealSession({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      sessionProtected: session.protected,\n      sessionCreatorId: session.userId,\n    });\n\n    if (session.protected && session.userId != payload.user.id) {\n      return res.json({\n        text: `This session is protected, only the creator can reveal it.`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    logger.info({\n      msg: `Revealing votes`,\n      sessionId: session.id,\n      team: {\n        id: team.id,\n        name: team.name,\n      },\n      user: {\n        id: payload.user.id,\n        name: payload.user.name,\n      },\n    });\n    const [revealErr] = await to(\n      SessionController.revealAndUpdateMessage(session, team, payload.user.id)\n    );\n\n    if (revealErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not reveal session`,\n        errorId,\n        err: revealErr,\n        payload,\n      });\n      span?.setAttributes({ 'error.id': errorId });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: `Unexpected error while reveal session & update message`,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_revealed',\n        count: 1,\n        segmentation: {},\n      });\n    }\n\n    return res.send();\n  }\n\n  /**\n   * A user clicks cancel button.\n   */\n  @Trace()\n  static async cancelSession({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      sessionProtected: session.protected,\n      sessionCreatorId: session.userId,\n    });\n\n    if (session.protected && session.userId != payload.user.id) {\n      return res.json({\n        text: `This session is protected, only the creator can cancel it.`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    logger.info({\n      msg: `Cancelling session`,\n      sessionId: session.id,\n      team: {\n        id: team.id,\n        name: team.name,\n      },\n      user: {\n        id: payload.user.id,\n        name: payload.user.name,\n      },\n    });\n    const [cancelErr] = await to(\n      SessionController.cancelAndUpdateMessage(session, team, payload.user.id)\n    );\n\n    if (cancelErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not cancel session`,\n        errorId,\n        err: cancelErr,\n        payload,\n      });\n      span?.setAttributes({ 'error.id': errorId });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: `Unexpected error while cancel session & update message`,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_cancelled',\n        count: 1,\n        segmentation: {},\n      });\n    }\n\n    return res.send();\n  }\n}\n","require('dotenv').config();\nimport {\n  BasicTracerProvider,\n  BatchSpanProcessor,\n} from '@opentelemetry/tracing';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nsetupTracing();\n\nimport logger from './lib/logger';\nimport * as sqlite from './lib/sqlite';\nimport * as redis from './lib/redis';\nimport Countly from 'countly-sdk-nodejs';\nimport * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport * as path from 'path';\nimport * as exphbs from 'express-handlebars';\nimport { OAuthRoute } from './routes/oauth';\nimport { PPCommandRoute } from './routes/pp-command';\nimport { InteractivityRoute } from './routes/interactivity';\n\nasync function main() {\n  // Start sqlite\n  await sqlite.init();\n\n  // Start redis\n  if (process.env.USE_REDIS) {\n    await redis.init();\n  }\n\n  // Start server\n  await initServer();\n\n  // If countly env variables exists, start countly stat reporting\n  if (process.env.COUNTLY_APP_KEY && process.env.COUNTLY_URL) {\n    logger.info({\n      msg: `Initing countly`,\n      url: process.env.COUNTLY_URL,\n      appKey: process.env.COUNTLY_APP_KEY,\n    });\n    Countly.init({\n      app_key: process.env.COUNTLY_APP_KEY,\n      url: process.env.COUNTLY_URL,\n    });\n  }\n\n  logger.info({ msg: 'Boot successful!' });\n}\n\nasync function initServer() {\n  const server = express();\n\n  // Setup handlebars\n  server.engine('html', exphbs({ extname: '.html' }));\n  server.set('view engine', 'html');\n  server.set('views', 'src/views'); // relative to process.cwd\n\n  // Parse body\n  server.use(bodyParser.urlencoded({ extended: false }));\n  server.use(bodyParser.json());\n\n  // Serve static files\n  server.use(process.env.BASE_PATH, express.static('src/public')); // relative to process.cwd\n\n  // Setup routes\n  initRoutes(server);\n\n  return new Promise((resolve, reject) => {\n    server.listen(process.env.PORT, (err) => {\n      if (err) return reject(err);\n      logger.info({ msg: `Server running`, port: process.env.PORT });\n      resolve();\n    });\n  });\n}\n\nfunction initRoutes(server: express.Express) {\n  const router = express.Router();\n\n  router.get('/', (req, res, next) => {\n    res.render('index', {\n      layout: false,\n      data: {\n        SLACK_CLIENT_ID: process.env.SLACK_CLIENT_ID,\n        SLACK_SCOPE: process.env.SLACK_SCOPE,\n        SLACK_APP_ID: process.env.SLACK_APP_ID,\n        COUNTLY_URL: process.env.COUNTLY_URL,\n        COUNTLY_APP_KEY: process.env.COUNTLY_APP_KEY,\n      },\n    });\n  });\n\n  router.get('/privacy', (req, res, next) => {\n    res.render('privacy', {\n      layout: false,\n      data: {\n        SLACK_APP_ID: process.env.SLACK_APP_ID,\n        COUNTLY_URL: process.env.COUNTLY_URL,\n        COUNTLY_APP_KEY: process.env.COUNTLY_APP_KEY,\n      },\n    });\n  });\n\n  router.get('/oauth', OAuthRoute.handle);\n  router.post('/slack/pp-command', PPCommandRoute.handle);\n  router.post('/slack/pp-slash-command', PPCommandRoute.handle);\n  router.post('/slack/action-endpoint', InteractivityRoute.handle);\n  router.post('/slack/interactivity', InteractivityRoute.handle);\n\n  router.get('/slack/direct-install', (req, res, next) => {\n    const url = `https://slack.com/oauth/v2/authorize?client_id=${process.env.SLACK_CLIENT_ID}&scope=${process.env.SLACK_SCOPE}`;\n    res.status(302).redirect(url);\n  });\n\n  // Serve under specified base path\n  server.use(`${process.env.BASE_PATH}`, router);\n}\n\nasync function setupTracing() {\n  const traceProvider = new BasicTracerProvider();\n  traceProvider.register();\n\n  if (!process.env.REPORT_TRACES) {\n    return;\n  }\n\n  const exporter = new JaegerExporter({\n    serviceName: 'pp',\n    tags: [],\n    host: process.env.JAEGER_HOST,\n    port: parseInt(process.env.JAEGER_PORT, 10),\n    logger: {\n      debug: () => {},\n      info: () => {},\n      warn: logger.warn.bind(logger),\n      error: logger.error.bind(logger),\n    },\n  });\n  traceProvider.addSpanProcessor(new BatchSpanProcessor(exporter));\n\n  logger.info({\n    msg: `Trace reporter started`,\n    jaegerAgent: {\n      host: process.env.JAEGER_HOST,\n      port: process.env.JAEGER_PORT,\n    },\n  });\n}\n\nmain().catch((err) => {\n  logger.error({ msg: 'Could not boot', err });\n  process.exit(1);\n});\n"],"sourceRoot":""}